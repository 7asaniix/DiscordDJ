"use strict";var child_process = require('child_process');class InternalDJ {    constructor(bot, wrapper, encoderCmd, multithreaded) {        this.bot = bot;        this.wrapper = wrapper;        this.playable = null;        this.musicQueue = [];        this.encoderCmd = encoderCmd;        this.cmdCache = null;        this.voiceConnection = null; //TODO        this.process = null;        this.stream = null;        this.multithreaded = multithreaded;    }    getCommand() {        if(this.cmdCache != null) return this.cmdCache;        var cmds = ["avconv", "ffmpeg", "avconv.exe", "ffmpeg.exe"];        if(this.encoderCmd != null) cmds.unshift(this.encoderCmd);        for(var i = 0; i < cmds.length; i++){            var p = child_process.spawnSync(cmds[i]);            if(!p.error) {                this.cmdCache = cmds[i];                return cmds[i];            }        }        return null;    }    encodeStream(stream, sampleRate, channels) {        if(this.process != null) {            this.process.kill();        }        this.process = child_process.spawn(this.getCommand() , [            "-f", "s16le",            "-ar", sampleRate,            "-ac", channels,            "-af", "volume=1",            "pipe:1",            "-i", "-"        ]);        stream.pipe(this.process.stdin);        this.process.stdout.once('end', function() {            this.process = null;        }.bind(this));        return this.process.stdout;    }    playStream(stream, sampleRate, channels, bitDepth) {        var options = {            frameDuration: 60,            sampleRate: sampleRate,            channels: channels,            float: false,            multiThreadedVoice: this.multithreaded        };        var readSize = sampleRate / 1000 * options.frameDuration * bitDepth / 8 * channels;        stream.once('readable', function() {            var encoder = this.voiceConnection.getEncoder(options);            var process = this.process;            var playable = this.playable;            encoder.onNeedBuffer = function() {                if(process.killed) return;                if(this.playable != playable) return this.stop();                var chunk = stream.read(readSize);                if(!chunk) return setTimeout(encoder.onNeedBuffer, options.frameDuration);                var sampleCount = readSize / channels / (bitDepth / 8);                encoder.enqueue(chunk, sampleCount);            }.bind(this);            encoder.onNeedBuffer();        }.bind(this));    }    play(playable) {        this.stop();        this.playable = playable;        var sampleRate = 48000;        var bitDepth = 16;        var channels = 1;        playable.createStream(function(stream) {            this.stream = stream;            stream = this.encodeStream(stream, sampleRate, channels);            stream.once('readable', function() {                this.wrapper.emit('play');            }.bind(this));            this.playStream(stream, sampleRate, channels, bitDepth);        }.bind(this));    }    stop() {        if(this.process != null) {            this.process.kill();            this.process = null;        }        if(this.stream != null) {            try {                this.stream.close();            } catch(e) {}            this.stream = null;        }    }    skip() {        this.stop();        if(this.playable != null) {            this.playable.removeAllListeners('data-changed');            this.playable = null;        }        this.wrapper.emit('skip');        if(this.playable == null && this.musicQueue.length > 0) {            this.play(this.musicQueue.shift());        }    }    addToQueue(playable) {        var self = this;        playable.on('data-changed', function() {            self.wrapper.emit('data-changed');        });        playable.loadData();        if(this.playable == null) {            this.play(playable);        } else {            this.musicQueue.push(playable);        }    }}module.exports = InternalDJ;